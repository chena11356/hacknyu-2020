{"moduleFile":{"sourceFilePath":"/Users/alexchen/Desktop/HackNYU-2020/src/components/wallet/events/componentWillLoad.ts","jsFilePath":"/Users/alexchen/Desktop/HackNYU-2020/src/components/wallet/events/componentWillLoad.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@services/error","@services/storage","stellar-sdk"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["stellar-sdk","@services/error","@services/storage"],"potentialCmpRefs":[]},"jsText":"import { StellarTomlResolver } from 'stellar-sdk';\r\nimport { handleError } from '@services/error';\r\nimport { get } from '@services/storage';\r\nexport default async function componentWillLoad() {\r\n    try {\r\n        const keystore = await get('WALLET[keystore]');\r\n        this.toml = await StellarTomlResolver.resolve(this.homeDomain);\r\n        if (keystore) {\r\n            this.account = Object.assign({}, JSON.parse(atob(keystore)));\r\n            this.updateAccount();\r\n        }\r\n    }\r\n    catch (err) {\r\n        this.error = handleError(err);\r\n    }\r\n}\r\n"}