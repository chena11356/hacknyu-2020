{"moduleFile":{"sourceFilePath":"/Users/alexchen/Desktop/HackNYU-2020/src/components/wallet/methods/makePayment0.ts","jsFilePath":"/Users/alexchen/Desktop/HackNYU-2020/src/components/wallet/methods/makePayment0.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@services/argon2","@services/error","@services/tweetnacl","lodash-es","stellar-sdk"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["stellar-sdk","lodash-es","@services/error","@services/argon2","@services/tweetnacl"],"potentialCmpRefs":[]},"jsText":"import { Account, TransactionBuilder, Transaction, BASE_FEE, Networks, Operation, Asset, Server } from 'stellar-sdk';\r\nimport { has as loHas, each as loEach } from 'lodash-es';\r\nimport { handleError } from '@services/error';\r\nimport { stretchPincode } from '@services/argon2';\r\nimport { decrypt } from '@services/tweetnacl';\r\nexport default async function makePayment(destination, asset, issuer) {\r\n    try {\r\n        const account = 'GBZWOEGPINOUOYYNWP5RX7RSKN2ICX32IP5CLMLKGAVG4IDP62Q56KRG';\r\n        const server = new Server('https://horizon-testnet.stellar.org');\r\n        server.transactions()\r\n            .forAccount(account)\r\n            .call()\r\n            .then(({ records }) => {\r\n            loEach(records, (record) => {\r\n                const transaction = new Transaction(record.envelope_xdr, Networks.TESTNET);\r\n                console.log(transaction.operations);\r\n            });\r\n        })\r\n            .catch((err) => console.error(err));\r\n        let instructions;\r\n        if (destination\r\n            && asset) {\r\n            instructions = await this.setPrompt({ message: `How much ${asset} to pay?` });\r\n            instructions = [instructions, asset, destination, issuer];\r\n        }\r\n        else {\r\n            if (this.account.accountType == \"FUND\") {\r\n                instructions = await this.setPrompt({ message: '{Amount} {Asset} {Destination of assets (school)}' });\r\n            }\r\n            else {\r\n                instructions = await this.setPrompt({ message: '{Amount} {Asset} {Destination of assets (teacher salaries, facilities, etc.)}' });\r\n            }\r\n            instructions = instructions.split(' ');\r\n            if (this.account.accountType == \"FUND\") {\r\n                if (!/xlm/gi.test(instructions[1]))\r\n                    instructions[3] = await this.setPrompt({\r\n                        message: `Which fund issues the ${instructions[1]} asset?`,\r\n                        placeholder: 'Enter ME to refer to the current fund'\r\n                    });\r\n            }\r\n            else {\r\n                if (!/xlm/gi.test(instructions[1]))\r\n                    instructions[3] = await this.setPrompt({\r\n                        message: `Which school issues the ${instructions[1]} asset?`,\r\n                        placeholder: 'Enter ME to refer to the current school'\r\n                    });\r\n            }\r\n        }\r\n        const pincode = await this.setPrompt({\r\n            message: 'Enter your account pincode',\r\n            type: 'password'\r\n        });\r\n        const pincode_stretched = await stretchPincode(pincode, this.account.publicKey);\r\n        const keypair = decrypt(this.account.cipher, this.account.nonce, pincode_stretched);\r\n        if (/me/gi.test(instructions[3]))\r\n            instructions[3] = keypair.publicKey();\r\n        this.error = null;\r\n        this.loading = Object.assign(Object.assign({}, this.loading), { pay: true });\r\n        await this.server\r\n            .accounts()\r\n            .accountId(keypair.publicKey())\r\n            .call()\r\n            .then(({ sequence }) => {\r\n            const account = new Account(keypair.publicKey(), sequence);\r\n            const transaction = new TransactionBuilder(account, {\r\n                fee: BASE_FEE,\r\n                networkPassphrase: Networks.TESTNET\r\n            })\r\n                .addOperation(Operation.payment({\r\n                destination: instructions[2],\r\n                asset: instructions[3] ? new Asset(instructions[1], instructions[3]) : Asset.native(),\r\n                amount: instructions[0]\r\n            }))\r\n                .setTimeout(0)\r\n                .build();\r\n            transaction.sign(keypair);\r\n            return this.server.submitTransaction(transaction)\r\n                .catch((err) => {\r\n                if ( // Paying an account which doesn't exist, create it instead\r\n                loHas(err, 'response.data.extras.result_codes.operations')\r\n                    && err.response.data.status === 400\r\n                    && err.response.data.extras.result_codes.operations.indexOf('op_no_destination') !== -1\r\n                    && !instructions[3]) {\r\n                    const transaction = new TransactionBuilder(account, {\r\n                        fee: BASE_FEE,\r\n                        networkPassphrase: Networks.TESTNET\r\n                    })\r\n                        .addOperation(Operation.createAccount({\r\n                        destination: instructions[2],\r\n                        startingBalance: instructions[0]\r\n                    }))\r\n                        .setTimeout(0)\r\n                        .build();\r\n                    transaction.sign(keypair);\r\n                    return this.server.submitTransaction(transaction);\r\n                }\r\n                else\r\n                    throw err;\r\n            });\r\n        })\r\n            .then((res) => console.log(res))\r\n            .finally(() => {\r\n            this.loading = Object.assign(Object.assign({}, this.loading), { pay: false });\r\n            this.updateAccount();\r\n        });\r\n    }\r\n    catch (err) {\r\n        this.error = handleError(err);\r\n    }\r\n}\r\n"}