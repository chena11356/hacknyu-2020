{"moduleFile":{"sourceFilePath":"/Users/alexchen/Desktop/HackNYU-2020/src/components/wallet/methods/trustAsset.ts","jsFilePath":"/Users/alexchen/Desktop/HackNYU-2020/src/components/wallet/methods/trustAsset.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@services/argon2","@services/error","@services/tweetnacl","stellar-sdk"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["stellar-sdk","@services/error","@services/argon2","@services/tweetnacl","lodash"],"potentialCmpRefs":[]},"jsText":"import { Account, TransactionBuilder, BASE_FEE, Networks, Operation, Asset } from 'stellar-sdk';\r\nimport { handleError } from '@services/error';\r\nimport { stretchPincode } from '@services/argon2';\r\nimport { decrypt } from '@services/tweetnacl';\r\nexport default async function trustAsset(asset, issuer, pincode_stretched) {\r\n    try {\r\n        const StellarSdk = require('stellar-sdk');\r\n        const _ = require('lodash');\r\n        const account = 'GBZWOEGPINOUOYYNWP5RX7RSKN2ICX32IP5CLMLKGAVG4IDP62Q56KRG';\r\n        const server = new StellarSdk.Server('https://horizon-testnet.stellar.org');\r\n        server.transactions()\r\n            .forAccount(account)\r\n            .call()\r\n            .then(({ records }) => {\r\n            _.each(records, (record) => {\r\n                const buffer = Buffer.from(record.envelope_xdr, 'base64');\r\n                const transaction = StellarSdk.xdr.TransactionEnvelope.fromXDR(buffer);\r\n                console.log(transaction);\r\n            });\r\n        })\r\n            .catch((err) => console.error(err));\r\n        let instructions;\r\n        if (asset\r\n            && issuer)\r\n            instructions = [asset, issuer];\r\n        else {\r\n            if (this.account.accountType == \"FUND\") {\r\n                instructions = await this.setPrompt({ message: '{Asset} {Key of source of assets (federal grants, taxes, etc.)}' });\r\n            }\r\n            else {\r\n                instructions = await this.setPrompt({ message: '{Asset} {Key of fund}' });\r\n            }\r\n            instructions = instructions.split(' ');\r\n        }\r\n        if (!pincode_stretched) {\r\n            const pincode = await this.setPrompt({\r\n                message: 'Enter your account pincode',\r\n                type: 'password'\r\n            });\r\n            pincode_stretched = await stretchPincode(pincode, this.account.publicKey);\r\n        }\r\n        const keypair = decrypt(this.account.cipher, this.account.nonce, pincode_stretched);\r\n        this.error = null;\r\n        this.loading = Object.assign(Object.assign({}, this.loading), { trust: true });\r\n        await this.server.accounts()\r\n            .accountId(keypair.publicKey())\r\n            .call()\r\n            .then(({ sequence }) => {\r\n            const account = new Account(keypair.publicKey(), sequence);\r\n            const transaction = new TransactionBuilder(account, {\r\n                fee: BASE_FEE,\r\n                networkPassphrase: Networks.TESTNET\r\n            })\r\n                .addOperation(Operation.changeTrust({\r\n                asset: new Asset(instructions[0], instructions[1])\r\n            }))\r\n                .setTimeout(0)\r\n                .build();\r\n            transaction.sign(keypair);\r\n            return this.server.submitTransaction(transaction);\r\n        })\r\n            .then((res) => console.log(res))\r\n            .finally(() => {\r\n            this.loading = Object.assign(Object.assign({}, this.loading), { trust: false });\r\n            this.updateAccount();\r\n        });\r\n    }\r\n    catch (err) {\r\n        this.error = handleError(err);\r\n        throw err;\r\n    }\r\n}\r\n"}