{"moduleFile":{"sourceFilePath":"/Users/alexchen/Desktop/HackNYU-2020/src/components/wallet/methods/createAccount.ts","jsFilePath":"/Users/alexchen/Desktop/HackNYU-2020/src/components/wallet/methods/createAccount.js","cmps":[],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@services/argon2","@services/error","@services/storage","@services/tweetnacl","axios","stellar-sdk"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomPropOrAttr":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["axios","stellar-sdk","@services/storage","@services/error","@services/argon2","@services/tweetnacl"],"potentialCmpRefs":[]},"jsText":"import axios from 'axios';\r\nimport { Keypair } from 'stellar-sdk';\r\nimport { set } from '@services/storage';\r\nimport { handleError } from '@services/error';\r\nimport { stretchPincode } from '@services/argon2';\r\nimport { encrypt } from '@services/tweetnacl';\r\nexport default async function createAccount() {\r\n    try {\r\n        const account_type = await this.setPrompt({\r\n            message: 'Are you creating a fund or a school?',\r\n            type: 'text'\r\n        });\r\n        if (account_type != \"FUND\" || account_type != \"SCHOOL\")\r\n            throw 'Invalid account type';\r\n        const pincode_1 = await this.setPrompt({\r\n            message: 'Enter an account pincode',\r\n            type: 'password'\r\n        });\r\n        const pincode_2 = await this.setPrompt({\r\n            message: 'Enter account pincode again',\r\n            type: 'password'\r\n        });\r\n        if (!pincode_1\r\n            || !pincode_2\r\n            || pincode_1 !== pincode_2)\r\n            throw 'Invalid pincode';\r\n        this.error = null;\r\n        this.loading = Object.assign(Object.assign({}, this.loading), { fund: true });\r\n        const keypair = Keypair.random();\r\n        const pincode_stretched = await stretchPincode(pincode_1, keypair.publicKey());\r\n        const { cipher, nonce } = encrypt(keypair.rawSecretKey(), keypair.rawPublicKey(), pincode_stretched);\r\n        await axios(`https://friendbot.stellar.org?addr=${keypair.publicKey()}`)\r\n            .finally(() => this.loading = Object.assign(Object.assign({}, this.loading), { fund: false }));\r\n        this.account = {\r\n            publicKey: keypair.publicKey(),\r\n            cipher,\r\n            nonce\r\n        };\r\n        set('WALLET[keystore]', btoa(JSON.stringify(this.account)));\r\n        this.updateAccount();\r\n    }\r\n    catch (err) {\r\n        this.error = handleError(err);\r\n    }\r\n}\r\n"}